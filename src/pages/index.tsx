import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useEffect, useRef, useState } from "react";
import Tips from "@/components/Tips/Tips";
import { ToastContainer, toast } from "react-toastify";
import Attempts from "@/components/Attempts/Attempts";

export default function Home() {
  const [randomNumer, setRandomNumber] = useState<number>(0);
  const [winGame, setWinGame] = useState<boolean>(false);
  const [attempts, setAttempts] = useState<number[]>([]);
  const [showTips, setShowTips] = useState<boolean>(false);
  const [tipsContent, setTipsContent] = useState<string[]>([
    "considere come√ßar o primeiro chute pelo meio do n√∫mero total",
    "comece definindo um n√∫mero min√≠mo e m√°ximo onde o valor do chute ser√° o resultado de: (min + max) / 2 = X",
  ]);
  const refNumber = useRef<HTMLInputElement>(null);
  const notifyInfo = (content: string) => toast.info(content);
  const notifySuccess = (content: string) => toast.success(content);

  function getRandomNumber() {
    setRandomNumber(Math.floor(Math.random() * 100) + 1);
  }

  function countAttempts(value: number) {
    if (attempts.includes(value)) {
      return;
    }
    setAttempts([...attempts, value]);
  }

  function enableTips() {
    if (!showTips) {
      setShowTips(true);
      return;
    }
    setShowTips(false);
  }
  function generateTips(content: string) {
    if (tipsContent.includes(content)) {
      return;
    }
    setTipsContent([...tipsContent, content]);
  }

  function checkNumber() {
    if (!!refNumber.current?.value) {
      const numberInsert = parseInt(refNumber.current?.value);
      countAttempts(numberInsert);

      if (numberInsert === randomNumer) {
        notifySuccess("Parab√©ns, voc√™ acertou o n√∫mero");
        setWinGame(true);
      }

      if (numberInsert > randomNumer) {
        generateTips(
          `Caso n√∫mero inserido for maior, realize a atribui√ß√£o do seu chute anterior no valor m√°ximo e subtraia - 1 aplicando a f√≥rmula novamente: (min + max) / 2 = X`
        );
        notifyInfo("N√∫mero inserido √© maior, digite um n√∫mero menor");
      }

      if (numberInsert < randomNumer) {
        generateTips(
          `Caso n√∫mero inserido for menor, realize a atribui√ß√£o do seu chute anterior no valor m√≠nimo e some + 1 aplicando a f√≥rmula novamente: (min + max) / 2 = X`
        );
        notifyInfo("N√∫mero inserido √© menor, digite um n√∫mero maior");
      }
    }
  }

  function resetGame() {
    getRandomNumber();
    setWinGame(false);
    setAttempts([]);
    setShowTips(false);
    setTipsContent([
      "considere come√ßar o primeiro chute pelo meio do n√∫mero total",
      "comece definindo um n√∫mero min√≠mo e m√°ximo onde o valor do chute ser√° o resultado de: (min + max) / 2 = X",
    ]);
  }

  useEffect(() => {
    getRandomNumber();
  }, []);
  return (
    <>
      <Head>
        <title>Pesquisa bin√°ria</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <section className={styles.container}>
          <div className={styles.title}>
            <h3>
              {" "}
              {winGame
                ? `Parab√©ns voc√™ acertou!!! ü§üü§™ O n√∫mero misterioso era ${randomNumer}`
                : "Estou pensando em um n√∫mero de 1 a 100. Adivinhe qual √© ? ü§î"}
            </h3>
            {!winGame && (
              <p>Estou pensando em um n√∫mero de 1 a 100. Adivinhe qual √© ?</p>
            )}
          </div>
          <div className={styles.content}>
            <div className={styles.input}>
              <label>Digite um n√∫mero</label>
              <input ref={refNumber} type="number"></input>
            </div>
            <button onClick={() => checkNumber()}>Verificar</button>
            <div className={styles.attempts}>
              <span>J√° tentou: {attempts.length} tentativa(s)</span>
            </div>

            {attempts.length > 0 && (
                <Attempts numbers={attempts}/>   
            )}
            
            {showTips && <Tips content={tipsContent} />}
          </div>

          <div className={styles.buttons}>
            <button onClick={() => resetGame()}>Resetar jogo</button>
            <button onClick={() => enableTips()}>
              {showTips ? "Ocultar dicas" : "Exibir dicas"}
            </button>
          </div>
          <div className={styles.footer}>
          <h4>Made with üíô by <a href="https://www.linkedin.com/in/giovanni-sena/" target="_blank">Giovanni Lima</a></h4>
          </div>
        </section>
        <ToastContainer />
      </main>
    </>
  );
}
